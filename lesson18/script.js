'use strict';
// Оператор присваивания (=)

let x = 2 * 3 - 1; // 5

let a, b, c;

a = b = c = 2 + 2; // 4

let z = 3 - (a = b + 1); // -2

// Оператор = возвращает значение , а не только присваивает.


// Оператор остатка от деления (%)

console.log( 5 % 2 ); // 1
console.log( 8 % 3 ); // 2
console.log( 6 % 3 ); // 0


// Возведение в степень (**)

console.log( 2 ** 2 ); // 4

console.log( 2 ** 4 ); // 16

console.log( 4 ** (1/2) ); // 2 - корень из 4


// Инкремент\декремент

// Инкремент - оператор который увеличивает число на 1 (++)

let counter = 2;

counter++;

console.log( counter ); // 3

// Декремент - оператор который уменьшает число на 1 (--)

counter--;

console.log( counter ); // 2

// Инкремент\декремент можно применять только к переменным



/*
    Эти оператор могут быть расположены не только после переменной, но и до.
    Расположенные после - называются 'постфиксная форма';
    Расположенные до - называются 'префиксная форма';
*/

let counter2 = 1;

let number = ++counter2;

console.log( number ); // 2

// В этой выражении сначала выполнится префиксная форма инкремента, а потом
// присваивание

let counter3 = 10;

let number2 = counter3++;

console.log( number2 ); // 10
console.log( counter3 ); // 11

// В этом выражении сначала выполнится присваивани, а потом постфиксная форма 
// инкремента


// Сокращенная арифметика

let n = 5;

n = n * 5; // 25

n *= 5; // 25 Сокращенное умножение

console.log( n );

/*

+=
-=
*=
/=
%=

*/

let m = 2;
m *= 3 + 5; // В этом выражении сначала выполнится сложение, а потом умножение
// 16  = сначала выполняется выражение, а потом скращенный оператор

console.log( m );


// Оператор запятая (,)

let g = (2, 3, 4, 5); // 5

g = (1 + 2, 3 + 4); // 7



// Оператор сравнения

// Оператор больше/меньше ( > , < )

console.log( 2 > 1 ); // true

// Любая операция сравнения в результате возвращает логическое значение (булевое)

// Оператор болье\меньше или равно

console.log( 10 >= 10 ); //true

// Оператор  равенства (==)

console.log( 5 == 10 ); // false


// Оператор НЕ равно (!=)

console.log( 5 != 10 ); // true


// Любая операция сравнения возвращает результат

let result = 5 > 4; //true

console.log( result );



// Сравнение строк

// Сравнение строк происходит по принципу посимвольного сравнения.
/*
    Учитываются порядковые номера символов к таблице Юникод. Чем номер больше,
    тем старше и символ.
*/
console.log( 'Я' > 'А' ); // true

console.log( 'Кот' > 'Код' ); // true

console.log( 'Сонный' > 'Сон' ); // true - Сонный больше т.к. у него больше символов

console.log( 'Банан' > 'апельсин' ); // true



// Сравнение разных типов данных

// при сравнении разных типов JS приводит каждый их них к числу!!!

console.log( '2' > 1 ); // true

console.log( '01' == 1 ); // true

console.log( true == 1 ); // true



// Строгое равенство (===)

// При строгом равенстве НЕ РАБОТАЕТ преобразование к числу, данные сравнивнимаются
// и по значению и по типу. Если типы разные, то всегда будет FALSE

console.log( true === 1 ); // false

console.log( 1 === 1 ); // true

console.log( '1' === '1' ); // true


// Есть также оператор срогого НЕравенства !==

/*
    Оператор равенства (==) не разичает 0 от false, пустую строку от false
*/


// Сравнение с null и undefined

console.log( null === undefined );
// false - они не равны потому что у них разные типы

console.log( null == undefined ); 
// true - они преобразуются она в false, соответственно они равны


// Странный результат сравнения null и 0

console.log( null > 0 ); // false
console.log( null == 0 ); // false
console.log( null >= 0 ); // true



// Несравнимое значение undefined

console.log( undefined > 0 ); // false
console.log( undefined < 0 ); // false
console.log( undefined == 0 ); // false





// Взаимодействие с пользователем

alert('Привет');

/*
    Модальное окно - это информационное окно, которое появляется поверх контента
    и не позволяет с ним взаимодействовать, пока это окно открыто.
*/

// prompt( заголовок, значение_по_умолчанию );

/*
    prompt - модальное окно, которое запрашивает у пользователя ввести данные.
    В результате подтверждения эти данные можно записать в переменную.

    Форма вернет null, если пользователь нажмет Отмена или закроет.

    Для кроссбраузерности желательно указывать значение по умолчанию хотябы пустое
*/

let text_from_user = prompt('Сколько вам лет?', '18');

console.log( text_from_user );



/*
    confirm - модальное окно, которое спрашивает пользователя Да\Нет (Ok\Отмена)
    И в результате возвращает true\false

*/

let question = confirm('Сегодня понедельник?');

console.log(question);



// Оператор ЕСЛИ (if)

let fruit = 'Апельсин';

if (fruit == 'Апельсин'){
    console.log('Почистить');
} else {
    console.log('Выбрать другой');
}

// Все что происходит в круглых скобках if перед проверкой приводится к булевому
// значению

if(1){

}

// Несколько условий else if()

let year = 2016;

if(year < 2016){
    console.log('Слишком рано');
}else if(year > 2016){
    console.log('Слишком поздно');
}else{
    console.log('Верно');
}

// Конструкций else if может быть множество
// Проверка закончится на том моменте, когда будет соблюдено условие



// Условный оператор (?) - тернарный оператор

let accessAllowed;
let age = 18;

if(age >= 18){
    accessAllowed = true;
}else{
    accessAllowed = false;
}

console.log(accessAllowed);


/*
    let result = условие ? значение1 : значение2;
*/

accessAllowed =  (age >= 18) ? true : false;


// Несколько операторов '?'

let message = (age < 3) ? 'Здравствуй, малыш!' :
              (age < 18) ? 'Привет' :
              (age < 100) ? 'Здравствуйте' :
              'Какой нобычный возраст';

console.log(message);


// Оператор ИЛИ ( || )


// Оператор ИЛИ позволяет делать конструкции проверок в которых может быть несколько
// сравнений

// Оператор ИЛИ находит первое истинное значение. (Он запинается на правде)

let items = 9;

if(items > 10 || items < 10){
    console.log('Не верно');
}else{
    console.log('Верно');
}


console.log( null || 1 ); // выведет 1 т.к. 1 это true
console.log( 1 || 0 ); // выведет 1 т.к. запнулся на истине



// Оператор И (&&)

// Оператор И находит первое ложное значение (Он запинается на лжи)

console.log( true && true ); // true
console.log( false && true ); // false
console.log( true && false ); // false
console.log( false && false ); // false

let hours = 12;
let minutes = 30;

if( hours == 12 && minutes == 30){
    console.log('Пора обедать');
}

